{"version":3,"sources":["Components/ContactsForm/ContactsForm.module.css","Components/ContactsList/ContactsList.js","Components/ContactsForm/ContactsForm.js","Components/Filter/Filter.js","App.js","index.js","Components/ContactsList/ContactsList.module.css","Components/Filter/Filter.module.css"],"names":["module","exports","ContactsList","contacts","onDeleteContact","className","styles","list","map","id","name","number","item","type","btn","onClick","ContactsForm","onSubmit","useState","setName","setNumber","handleChange","event","currentTarget","value","form","label","pattern","title","input","onChange","required","preventDefault","Filter","App","listOfContact","setContacts","filter","setFilter","firstRender","useRef","useEffect","current","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","contact","shortid","generate","find","toLowerCase","alert","prevContacts","normalizeFilter","includes","getContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c1ba85c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__3MDAp\",\"label\":\"ContactsForm_label__30v9W\",\"input\":\"ContactsForm_input__3yLW5\",\"btn\":\"ContactsForm_btn__2Y3fg\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactsList.module.css';\r\n\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) => (\r\n    <ul className={styles.list}>\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className={styles.item}>\r\n                <p className={styles.name}>{name} <span>{number}</span></p>\r\n                <button\r\n                    type=\"button\"\r\n                    className={styles.btn}\r\n                    onClick={() =>\r\n                    onDeleteContact(id)}\r\n                >Delete\r\n                </button>\r\n            </li>\r\n        )\r\n        )}\r\n    </ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n}\r\nexport default ContactsList;\r\n","import { useState } from \"react\";\r\nimport PropTypes  from 'prop-types';\r\nimport styles from './ContactsForm.module.css';\r\n\r\nfunction ContactsForm ({ onSubmit }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  \r\n  \r\n  function handleChange(event) {\r\n      const { name, value } = event.currentTarget;\r\n      switch (name) {\r\n          case \"name\":\r\n              setName(value);\r\n              break;\r\n          \r\n              case \"number\":\r\n                  setNumber(value);\r\n              break;\r\n          \r\n                  default:\r\n                      return;\r\n                    }\r\n    };\r\n                function handleSubmit(event) {\r\n                    event.preventDefault();\r\n                    onSubmit(name, number);\r\n                    setName(\"\");\r\n                    setNumber(\"\");\r\n    };\r\n                \r\n    return (\r\n        <form className={styles.form}>\r\n            <label className={styles.label}>Name:\r\n                <input type=\"text\" name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\" title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    className={styles.input}\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    required\r\n                    />\r\n            </label>\r\n            <label className={styles.label}>Number:\r\n                <input type=\"tel\" name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    className={styles.input} value={number}\r\n                    onChange={handleChange}\r\n                    required />\r\n            </label>\r\n            <button type=\"button\" className={styles.btn} onClick={handleSubmit}>Add contact</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nContactsForm.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.number,\r\n};\r\n\r\n\r\nexport default ContactsForm;\r\n// class ContactsForm extends Component{\r\n//     static propTypes = {\r\n//         name: PropTypes.string,\r\n//         number: PropTypes.number,\r\n//     };\r\n\r\n//     state = {\r\n//         name: '',\r\n//         number: '',\r\n//     };\r\n\r\n//     handleChange = (event) => {\r\n//         this.setState({ [event.currentTarget.name]: event.currentTarget.value })\r\n//     }\r\n    \r\n//     handleSubmit = event => {\r\n//         event.preventDefault();\r\n//         this.props.onAddContact(this.state.name, this.state.number);\r\n//         this.setState({ name: '', number: '' });\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <form className={styles.form}>\r\n//                 <label className={styles.label}>Name:\r\n//                     <input type=\"text\" name=\"name\"\r\n//                         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\" title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//                         className ={styles.input}\r\n//                         value={this.state.name}\r\n//                         onChange={this.handleChange}\r\n//                         required \r\n//                     />\r\n//                 </label>\r\n//                 <label className={styles.label}>Number:\r\n//                     <input type=\"tel\" name=\"number\"\r\n//                     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                     title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                     className={styles.input} value={this.state.number} onChange={this.handleChange} required />\r\n//                 </label>\r\n//                 <button type=\"button\" className={styles.btn} onClick={this.handleSubmit}>Add contact</button>\r\n//             </form>\r\n//         )\r\n//     }\r\n//     }\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <label className={styles.label}>Find contacts by name\r\n        <input className={styles.input} type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n\r\n}\r\n\r\nexport default Filter;\r\n\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport shortid from 'shortid';\r\n// import PropTypes, { shape } from 'prop-types';\r\nimport './App.css';\r\nimport listOfContact from \"./data/contacts.json\";\r\n\r\nimport ContactsList from \"./Components/ContactsList\";\r\nimport ContactsForm from \"./Components/ContactsForm\";\r\nimport Filter from \"./Components/Filter\";\r\n\r\nexport default function App() {\r\n\r\n    const [contacts, setContacts] = useState(listOfContact);\r\n    const [filter, setFilter] = useState(\"\");\r\n    const firstRender = useRef(true);\r\n    \r\n    \r\n    useEffect(() => {\r\n        if (firstRender.current) {\r\n            const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\r\n            \r\n            if (parsedContacts) {\r\n                setContacts(parsedContacts);\r\n            }\r\n            \r\n            firstRender.current = false;\r\n            return;\r\n        }\r\n        localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n    }, [contacts]);\r\n    \r\n    \r\n    function addContact(name, number) {\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    };\r\n    contacts.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    )\r\n      ? alert(`${name} is already added.`)\r\n      : setContacts((prevContacts) => [contact, ...prevContacts]);\r\n  }\r\n    \r\n    function changeFilter(event) {\r\n        setFilter(event.currentTarget.value);\r\n    };\r\n\r\n  const getContacts = () => {\r\n    const normalizeFilter = filter.toLowerCase();\r\n      return contacts.filter(contact =>\r\n          contact.name.toLowerCase().includes(normalizeFilter),\r\n    );\r\n  }\r\n    \r\n    function deleteContact(contactId) {\r\n        setContacts(prevContacts => prevContacts.filter(contact => contact.id !== contactId));\r\n    };\r\n    \r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Phonebook</h1>\r\n            <ContactsForm\r\n                onSubmit={addContact}\r\n            />\r\n\r\n            <h2>Contacts</h2>\r\n\r\n            <Filter\r\n                value={filter}\r\n                onChange={changeFilter}\r\n            />\r\n\r\n            <ContactsList\r\n                contacts={getContacts()}\r\n                onDeleteContact={deleteContact}\r\n            />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n// export default App;\r\n// class App extends Component {\r\n    //     static defaultProps = {\r\n//         totalContactsCount: null,\r\n//         visibleContacts: null,\r\n//     }\r\n//     static propTypes = {\r\n    //         contacts: PropTypes.arrayOf(\r\n//             PropTypes, shape(\r\n//                 {\r\n//                     id: PropTypes.any.isRequired,\r\n//                     name: PropTypes.string.isRequired,\r\n//                     number: PropTypes.string.isRequired,\r\n//                 }\r\n//             )\r\n//         ),\r\n//         filter: PropTypes.string,\r\n//         totalContactsCount: PropTypes.number,\r\n//         visibleContacts: PropTypes.number,\r\n//     };\r\n//     state = {\r\n//         contacts:\r\n//             [{ id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//             { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//             { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//             { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },],\r\n//         filter: '',\r\n//     };\r\n\r\n// componentDidMount() {\r\n//     const contacts = localStorage.getItem('contacts');\r\n//     const parsedContacts = JSON.parse(contacts);\r\n//     if (parsedContacts) {\r\n//       this.setState( {contacts: parsedContacts});\r\n//     }\r\n//   }\r\n//     componentDidUpdate(prevState) {\r\n//         if (this.state.contacts !== prevState.contacts) {\r\n//             localStorage.setItem('contacts', JSON.stringify(this.state.contacts));            \r\n//     }\r\n// }\r\n\r\n//     addContact = (name, number) => {\r\n//         const isInContacts = this.state.contacts.some(contact => contact.name === name)\r\n//         if (isInContacts) { alert(`${name} is already in contacts.`); return }\r\n        \r\n//         if (name && number) {\r\n//             const contact = {\r\n//                 id: shortid.generate(),\r\n//                 name,\r\n//                 number,\r\n//             };\r\n//             this.setState(prevState => ({\r\n//                 contacts: [contact, ...prevState.contacts],\r\n//             }));\r\n//         }\r\n//     };\r\n//     deleteContact = (contactId => {\r\n//         this.setState(prevState => ({\r\n//             contacts: prevState.contacts.filter(contact => contact.id !== contactId)\r\n//         }))\r\n//     });\r\n\r\n//     changeFilter = event => {\r\n//         this.setState({ filter: event.currentTarget.value })\r\n//     }\r\n\r\n     \r\n//     render() {\r\n//         const { contacts, filter } = this.state;\r\n//         const totalContactsCount = contacts.length;\r\n\r\n//         const normalizedFilter = this.state.filter.toLocaleLowerCase();\r\n//         const visibleContacts = this.state.contacts.filter(contact => contact.name.toLocaleLowerCase().includes(normalizedFilter),);\r\n//     return (<div className=\"App\">\r\n//             <h1>Phonebook</h1>\r\n//             <ContactsForm contacts={contacts} onAddContact={this.addContact} />\r\n            \r\n//             <h2>Contacts(total: {totalContactsCount})</h2>\r\n//             <Filter value={filter} onchange={this.changeFilter} />\r\n//             <ContactsList contacts={visibleContacts} onDeleteContact={this.deleteContact} />\r\n//         </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__iVFCQ\",\"item\":\"ContactsList_item__3zYTY\",\"name\":\"ContactsList_name__33iwg\",\"btn\":\"ContactsList_btn__2V8Tg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2ZVaO\",\"btn\":\"Filter_btn__9qirb\"};"],"sourceRoot":""}